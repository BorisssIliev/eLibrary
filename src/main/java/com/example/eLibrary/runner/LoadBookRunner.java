package com.example.eLibrary.runner;

import com.example.eLibrary.entity.book.Book;
import com.example.eLibrary.entity.book.BookImage;
import com.example.eLibrary.service.book.BookImageService;
import com.example.eLibrary.service.book.BookService;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.*;
import java.time.LocalDate;
import java.util.List;
import java.util.UUID;

@Component
@RequiredArgsConstructor
public class LoadBookRunner implements CommandLineRunner {

    private final BookService bookService;
    private final BookImageService bookImageService;

    @Override
    public void run(String... args) throws Exception {
        loadBooks();
        setUpBookImages();
    }

    private void loadBooks() {
        List<Book> allBooks = bookService.getAllBooks();

        String[] titles = {
                "1984", "–ü—Ä–µ—Å—Ç—ä–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ", "–ú–∞–ª–∫–∏—è—Ç –ø—Ä–∏–Ω—Ü", "–ì–æ—Ä–¥–æ—Å—Ç –∏ –ø—Ä–µ–¥—Ä–∞–∑—Å—ä–¥—ä—Ü–∏",
                "–í–ª–∞—Å—Ç–µ–ª–∏–Ω—ä—Ç –Ω–∞ –ø—Ä—ä—Å—Ç–µ–Ω–∏—Ç–µ: –ó–∞–¥—Ä—É–≥–∞—Ç–∞ –Ω–∞ –ø—Ä—ä—Å—Ç–µ–Ω–∞", "–•–∞—Ä–∏ –ü–æ—Ç—ä—Ä –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—è—Ç –∫–∞–º—ä–∫",
                "–î–∞ —É–±–∏–µ—à –ø—Ä–∏—Å–º–µ—Ö—É–ª–Ω–∏–∫", "–ü—ä—Ç–µ–≤–æ–¥–∏—Ç–µ–ª –Ω–∞ –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏—è —Å—Ç–æ–ø–∞–¥–∂–∏—è", "–ì—Ä–∞—Ñ –ú–æ–Ω—Ç–µ –ö—Ä–∏—Å—Ç–æ",
                "–ò–≥—Ä–∞ –Ω–∞ —Ç—Ä–æ–Ω–æ–≤–µ", "–®–∏—Ñ—ä—Ä—ä—Ç –Ω–∞ –õ–µ–æ–Ω–∞—Ä–¥–æ"
        };

        String[] authors = {
                "–î–∂–æ—Ä–¥–∂ –û—Ä—É–µ–ª", "–§—å–æ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏", "–ê–Ω—Ç–æ–∞–Ω –¥—å–æ –°–µ–Ω—Ç-–ï–∫–∑—é–ø–µ—Ä–∏", "–î–∂–µ–π–Ω –û—Å—Ç–∏–Ω",
                "–î–∂. –†. –†. –¢–æ–ª–∫–∏–Ω", "–î–∂. –ö. –†–æ—É–ª–∏–Ω–≥", "–•–∞—Ä–ø—ä—Ä –õ–∏", "–î—ä–≥–ª–∞—Å –ê–¥–∞–º—Å", "–ê–ª–µ–∫—Å–∞–Ω–¥—ä—Ä –î—é–º–∞",
                "–î–∂–æ—Ä–¥–∂ –†. –†. –ú–∞—Ä—Ç–∏–Ω", "–î–∞–Ω –ë—Ä–∞—É–Ω"
        };

        String[] genres = {
                "–î–∏—Å—Ç–æ–ø–∏—è", "–†–æ–º–∞–Ω", "–ü—Ä–∏–∫–∞–∑–∫–∞", "–†–æ–º–∞–Ω", "–§–µ–Ω—Ç—ä–∑–∏", "–§–µ–Ω—Ç—ä–∑–∏", "–†–æ–º–∞–Ω", "–ù–∞—É—á–Ω–∞ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
                "–ü—Ä–∏–∫–ª—é—á–µ–Ω—Å–∫–∏", "–§–µ–Ω—Ç—ä–∑–∏", "–¢—Ä–∏–ª—ä—Ä"
        };

        LocalDate[] dates = {
                LocalDate.of(1949, 6, 8),
                LocalDate.of(1866, 1, 1),
                LocalDate.of(1943, 4, 6),
                LocalDate.of(1813, 1, 28),
                LocalDate.of(1954, 7, 29),
                LocalDate.of(1997, 6, 26),
                LocalDate.of(1960, 7, 11),
                LocalDate.of(1979, 10, 12),
                LocalDate.of(1844, 1, 1),
                LocalDate.of(1996, 8, 6),
                LocalDate.of(2003, 3, 18)
        };

        String[] summaries = {
                "–†–æ–º–∞–Ω –∑–∞ –¥–∏—Å—Ç–æ–ø–∏—á–Ω–æ –±—ä–¥–µ—â–µ...",
                "–ò—Å—Ç–æ—Ä–∏—è –∑–∞ –º–æ—Ä–∞–ª–Ω–∏ –¥–∏–ª–µ–º–∏.",
                "–ü—Ä–∏–∫–∞–∑–∫–∞ –∑–∞ –º–∞–ª–∫–∏—è –ø—Ä–∏–Ω—Ü...",
                "–õ—é–±–æ–≤ –∏ —Å–æ—Ü–∏–∞–ª–Ω–∏ –ø—Ä–µ–¥—Ä–∞–∑—Å—ä–¥—ä—Ü–∏.",
                "–ï–ø–∏—á–Ω–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤ –°—Ä–µ–¥–Ω–∞—Ç–∞ –∑–µ–º—è.",
                "–•–∞—Ä–∏ –æ—Ç–∫—Ä–∏–≤–∞ –º–∞–≥–∏—á–µ—Å–∫–∏—è —Å–≤—è—Ç.",
                "–ò—Å—Ç–æ—Ä–∏—è –∑–∞ —Ä–∞—Å–∏–∑–º–∞ –≤ —é–∂–Ω–∏—Ç–µ —â–∞—Ç–∏.",
                "–ó–∞–±–∞–≤–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –≤ –∫–æ—Å–º–æ—Å–∞.",
                "–û—Ç–º—ä—â–µ–Ω–∏–µ—Ç–æ –Ω–∞ –ï–¥–º–æ–Ω –î–∞–Ω—Ç–µ—Å.",
                "–ë–æ—Ä–±–∞ –∑–∞ –≤–ª–∞—Å—Ç –≤ –°–µ–¥–µ–º—Ç–µ –∫—Ä–∞–ª—Å—Ç–≤–∞.",
                "–ú–∏—Å—Ç–µ—Ä–∏—è —Å —Ç–∞–π–Ω–∏ –æ–±—â–µ—Å—Ç–≤–∞."
        };

        for (int i = 0; i < titles.length; i++) {
            Book book = Book.builder()
                    .title(titles[i])
                    .author(authors[i])
                    .isbn(UUID.randomUUID().toString())
                    .genre(genres[i])
                    .publicationDate(dates[i])
                    .summary(summaries[i])
                    .build();

            if (!bookService.existsByTitleAndAuthor(book.getTitle(), book.getAuthor())) {
                bookService.saveBook(book);
            }
        }
    }

    @Transactional
    private void setUpBookImages() {
        List<Book> books = bookService.getAllBooks();
        String[] imageFiles = {
                "1984.png", "prestyplenie.jpg", "malkiqt.jpg", "gordost.jpg",
                "prustena.jpg", "hari.jpg", "da-ubiesh-prismehulnik.jpg",
                "galakti4eskiq.jpg", "graf-monte-kristo.jpg", "igra-na-tronove.jpg",
                "shifura.jpg"
        };

        Path uploadDir = Path.of("uploads");
        try {
            if (!Files.exists(uploadDir)) {
                Files.createDirectories(uploadDir);
            }
        } catch (IOException e) {
            System.err.println("‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ uploads –ø–∞–ø–∫–∞: " + e.getMessage());
        }

        for (int i = 0; i < books.size() && i < imageFiles.length; i++) {
            Book book = books.get(i);

            // ‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–º–µ –∞–∫–æ –∫–Ω–∏–≥–∞—Ç–∞ –≤–µ—á–µ –∏–º–∞ —Å–Ω–∏–º–∫–∞
            if (book.getBookImages() != null && !book.getBookImages().isEmpty()) {
                System.out.println("‚ö†Ô∏è –ö–Ω–∏–≥–∞—Ç–∞ \"" + book.getTitle() + "\" –≤–µ—á–µ –∏–º–∞ —Å–Ω–∏–º–∫–∞. –ü—Ä–æ–ø—É—Å–∫–∞–º–µ.");
                continue;
            }

            String originalFileName = imageFiles[i];
            String newFileName = UUID.randomUUID() + "_" + originalFileName;

            try {
                Path sourcePath = Path.of("src/main/resources/static/images", originalFileName);
                Path targetPath = Path.of("uploads", newFileName);
                Files.copy(sourcePath, targetPath, StandardCopyOption.REPLACE_EXISTING);

                BookImage bookImage = BookImage.builder()
                        .imageName(newFileName)
                        .book(book)
                        .build();

                bookImageService.saveBookImage(bookImage);
                System.out.println("üìö –°–Ω–∏–º–∫–∞ –¥–æ–±–∞–≤–µ–Ω–∞: " + book.getTitle());
            } catch (IOException e) {
                System.err.println("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å–Ω–∏–º–∫–∞ –∑–∞ " + book.getTitle() + ": " + e.getMessage());
            }
        }
    }
}
